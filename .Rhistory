# Define different plotting characters
pch_vals <- c(16, 17, 18, 19)  # Different pch values for each plot
# Plot the charts with different pch values
for (i in 1:4) {
ff[2:3] <- lapply(paste0(c("y", "x"), i), as.name)
plot(ff, data = anscombe, col = "purple", pch = pch_vals[i], bg = "pink", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "green")
}
# Add a main title
mtext("Anscombe's 4 Regression Data Sets", outer = TRUE, cex = 1.5)
# Restore default par settings
par(op)
library(ggplot2)
for (i in 1:4) {
y_col <- paste0("y", i)
x_col <- paste0("x", i)
# Fit the model
mods[[i]] <- lm(as.formula(paste(y_col, "~", x_col)), data = anscombe_df)
# Prepare data for ggplot
temp_data <- data.frame(x = anscombe_df[[x_col]], y = anscombe_df[[y_col]],
model = paste("Model", i))
plot_data <- rbind(plot_data, temp_data)
}
# Load Anscombe's dataset
anscombe_df <- anscombe
for (i in 1:4) {
y_col <- paste0("y", i)
x_col <- paste0("x", i)
# Fit the model
mods[[i]] <- lm(as.formula(paste(y_col, "~", x_col)), data = anscombe_df)
# Prepare data for ggplot
temp_data <- data.frame(x = anscombe_df[[x_col]], y = anscombe_df[[y_col]],
model = paste("Model", i))
plot_data <- rbind(plot_data, temp_data)
}
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
par(mfrow=c(3, 2))
# Scatterplot
# Note the incremental additions
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=2) # Try different cex value?
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for?
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
# Setting label orientation, margins c(bottom, left, top, right) & text size
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=2) # Try different cex value?
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for?
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
mods <- list()
plot_data <- data.frame()
# Loop to fit linear models and prepare plotting data
for (i in 1:4) {
y_col <- paste0("y", i)
x_col <- paste0("x", i)
# Fit the model
mods[[i]] <- lm(as.formula(paste(y_col, "~", x_col)), data = anscombe)
# Prepare data for ggplot
temp_data <- data.frame(x = anscombe[[x_col]], y = anscombe[[y_col]],
model = paste("Model", i))
plot_data <- rbind(plot_data, temp_data)
}
# Define custom colors
point_colors <- c("blue", "orange", "red", "green")
line_colors <- c("darkblue", "darkorange", "darkred", "darkgreen")
# Define the ggplot object
gg <- ggplot(plot_data, aes(x = x, y = y)) +
geom_point(aes(shape = model, color = model), size = 3, fill = "lightblue") +
geom_smooth(method = "lm", aes(color = model), se = FALSE) +
scale_shape_manual(values = c(16, 17, 18, 19)) +  # Different shapes
scale_color_manual(values = point_colors) +       # Different colors for points
theme_minimal(base_family = "serif") +            # Use serif font
labs(title = "Anscombe's 4 Regression Data Sets", x = "X", y = "Y") +
theme(plot.title = element_text(hjust = 0.5, size = 16))
# Add each model's regression line in a loop
for (i in 1:4) {
gg <- gg + geom_abline(intercept = coef(mods[[i]])[1],
slope = coef(mods[[i]])[2],
color = line_colors[i], linetype = "dashed")
}
# Print the plot
print(gg)
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,
"Pressure (mm Hg)\nversus\nTemperature (Celsius)")
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,
ess
(pressure, pch=1
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,)
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,)
par(mfrow=c(3, 2))
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=2) # Try different cex value?
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for?
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
# Setting label orientation, margins c(bottom, left, top, right) & text size
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=5) # Try different cex value?
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for? 1 Stands for the x-axis
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=14)  # Can you change pch?
plot(pressure, pch=14)  # Can you change pch?
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=5) # Try different cex value?
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for? 1 Stands for the x-axis
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
Y <- rnorm(50)
Y[Y < -3.5 | Y > 3.5] <- NA # Selection/set range
x <- seq(-3.5, 3.5, .1)
dn <- dnorm(x)
par(mar=c(4.5, 4.1, 3.1, 0))
hist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5),
col="gray80", freq=FALSE)
lines(x, dnorm(x), lwd=2)
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(mar=c(2, 3.1, 2, 2.1))
midpts <- barplot(VADeaths,
col=gray(0.1 + seq(1, 9, 2)/11),
names=rep("", 4))
mtext(sub(" ", "\n", colnames(VADeaths)),
at=midpts, side=1, line=0.5, cex=0.5)
text(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,
VADeaths,
col=rep(c("white", "black"), times=3:2),
cex=0.8)
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(mar=c(3, 4.1, 2, 0))
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset= supp == "VC", col="white",
xlab="",
ylab="tooth length", ylim=c(0,35))
mtext("Vitamin C dose (mg)", side=1, line=2.5, cex=0.8)
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset= supp == "OJ")
legend(1.5, 9, c("Ascorbic acid", "Orange juice"),
fill = c("white", "gray"),
bty="n")
par(mar=c(5.1, 4.1, 4.1, 2.1))
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
par(mar=c(0, 0.5, 0, 0), lwd=0.5)
persp(x, y, z, theta = 30, phi = 30,
expand = 0.5)
par(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)
par(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
names(pie.sales) <- c("Blueberry", "Cherry",
"Apple", "Boston Cream", "Other", "Vanilla")
pie(pie.sales, col = gray(seq(0.3,1.0,length=6)))
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,
pch=1
plot(pressure, pch=16)
plot(pressure, pch=6)  # Can you change pch?
text(150, 600,
plot(pressure, pch=6)
plot(pressur
install.packages(c("gsubfn", "proto", "tidyverse"))
library(gsubfn)
axiom="X"
rules=list("X"="F-[[X]+X]+F[+FX]-X", "F"="FF")
angle=22.5
depth=6
for (i in 1:depth) axiom=gsubfn(".", rules, axiom)
library(gsubfn)
library(tidyverse)
axiom="X"
rules=list("X"="F-[[X]+X]+F[+FX]-X", "F"="FF")
angle=22.5
depth=6
for (i in 1:depth) axiom=gsubfn(".", rules, axiom)
actions=str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|R|\\[|\\]|\\|") %>% unlist
status=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))
points=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)
owidall = read.csv("https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true")
# Deselect cases/rows
owidall = owidall[!grepl("^OWID", owidall$iso_code), ]
# Subset by continent: Europe
owideu = subset(owidall, continent=="Europe")
# Load necessary libraries
library(ggplot2)
# Scatterplot using data
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
geom_text(aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Scatterplot using your actual data (owideu)
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatter points
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3) +  # Add country labels
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +  # Y-axis limits
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +  # X-axis formatted
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
geom_text(aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
rlang::last_trace()
# Convert 'year_month' (or a date-like column) to Date format
owideu$date <- as.Date(owideu$year_month, format = "%Y-%m-%d")  # Adjust format if needed
# Scatterplot using your actual data (owideu)
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatter points
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3) +  # Add country labels
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by 1000)) +  # Y-axis limits
# Basic scatterplot to ensure axis labels are visible
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatterplot
labs(
title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",  # X-axis label
y = "COVID Deaths in Europe (Daily)"  # Y-axis label
) +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +  # Y-axis limits
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +  # X-axis formatting
theme_minimal(base_size = 15) +  # Basic theme
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  # Rotate X-axis labels
axis.title.x = element_text(size = 14, face = "bold"),  # Ensure X-axis title
axis.title.y = element_text(size = 14, face = "bold"),  # Ensure Y-axis title
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")  # Title centered
)
owidall = read.csv("https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true")
# Deselect cases/rows
owidall = owidall[!grepl("^OWID", owidall$iso_code), ]
# Subset by continent: Europe
owideu = subset(owidall, continent=="Europe")
library(ggplot2)
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatterplot
labs(
title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",  # X-axis label
y = "COVID Deaths in Europe (Daily)"  # Y-axis label
) +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +  # Y-axis limits
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +  # X-axis formatting
theme_minimal(base_size = 15) +  # Basic theme
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  # Rotate X-axis labels
axis.title.x = element_text(size = 14, face = "bold"),  # Ensure X-axis title
axis.title.y = element_text(size = 14, face = "bold"),  # Ensure Y-axis title
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")  # Title centered
)
rlang::last_trace()
str(owideu)
# If necessary, convert the date column to Date format
owideu$date <- as.Date(owideu$date)
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
geom_text(aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# If necessary, convert the date column to Date format
owideu$date <- as.Date(owideu$date)
# Subset the data for labeling
label_data <- subset(owideu, location %in% c("Spain", "Germany", "Ukraine", "Italy"))
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
# Only label selected countries
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# If necessary, convert the date column to Date format
owideu$date <- as.Date(owideu$date)
# Subset to find the peak deaths for each country
label_data <- owideu %>%
filter(location %in% c("Spain", "Germany", "Ukraine", "Italy")) %>%
group_by(location) %>%
slice_max(new_deaths, n = 1)
library(dplyr)
owideu$date <- as.Date(owideu$date)
# Subset to find the peak deaths for each country
label_data <- owideu %>%
filter(location %in% c("Spain", "Germany", "Ukraine", "Italy")) %>%
group_by(location) %>%
slice_max(new_deaths, n = 1)
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
# Only label selected countries at their peak deaths
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Subset to find the peak deaths for each country
label_data <- owideu %>%
filter(location %in% c("Spain", "Germany", "Ukraine", "Italy")) %>%
group_by(location) %>%
slice_max(new_deaths, n = 1)
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
# Only label selected countries at their peak deaths
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",  # x-axis label
y = "COVID Deaths in Europe (Daily)") +  # y-axis label
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Set seed for reproducibility
set.seed(123)
# Generate a dataset
df <- data.frame(
ID = 1:100,  # IDs from 1 to 100
Category = sample(c("A", "B", "C"), 100, replace = TRUE),  # Randomly assign categories
Value = round(runif(100, min = 10, max = 100), 2),  # Random values between 10 and 100
Date = sample(seq(as.Date('2020-01-01'), as.Date('2021-01-01'), by="day"), 100, replace = TRUE)  # Random dates
)
# View the first few rows of the dataset
head(df)
View(df)
install.packages("ggplot2")  # Only needed once
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Generate a dataset
df <- data.frame(
ID = 1:100,  # IDs from 1 to 100
Category = sample(c("A", "B", "C"), 100, replace = TRUE),  # Randomly assign categories
Value = round(runif(100, min = 10, max = 100), 2),  # Random values between 10 and 100
Date = sample(seq(as.Date('2020-01-01'), as.Date('2021-01-01'), by="day"), 100, replace = TRUE)  # Random dates
)
# View the first few rows of the dataset
head(df)
df_summary <- aggregate(Value ~ Category, df2, mean)
df_summary <- aggregate(Value ~ Category, df, mean)
ggplot(df_summary, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black")
install.packages("ggplot2")  # Only needed once
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")  # Only needed once
library(ggplot2)
df_summary <- aggregate(Value ~ Category, df, mean)
ggplot(df_summary, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black")
installed.packages()["ggplot2", ]
ggplot(df_summary, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black")
library(ggplot2)
summary_df <- df %>%
group_by(Category) %>%
summarize(
Count = n(),
Avg_Value = mean(Value)
)
install.packages("ggplot2")
install.packages("gt")
install.packages("dplyr")
install.packages("tidyr")
summary_df <- df %>%
group_by(Category) %>%
summarize(
Count = n(),
Avg_Value = mean(Value)
)
