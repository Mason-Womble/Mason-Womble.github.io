labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
rlang::last_trace()
# Convert 'year_month' (or a date-like column) to Date format
owideu$date <- as.Date(owideu$year_month, format = "%Y-%m-%d")  # Adjust format if needed
# Scatterplot using your actual data (owideu)
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatter points
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3) +  # Add country labels
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by 1000)) +  # Y-axis limits
# Basic scatterplot to ensure axis labels are visible
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatterplot
labs(
title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",  # X-axis label
y = "COVID Deaths in Europe (Daily)"  # Y-axis label
) +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +  # Y-axis limits
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +  # X-axis formatting
theme_minimal(base_size = 15) +  # Basic theme
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  # Rotate X-axis labels
axis.title.x = element_text(size = 14, face = "bold"),  # Ensure X-axis title
axis.title.y = element_text(size = 14, face = "bold"),  # Ensure Y-axis title
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")  # Title centered
)
owidall = read.csv("https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true")
# Deselect cases/rows
owidall = owidall[!grepl("^OWID", owidall$iso_code), ]
# Subset by continent: Europe
owideu = subset(owidall, continent=="Europe")
library(ggplot2)
ggplot(owideu, aes(x = year_month, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +  # Basic scatterplot
labs(
title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",  # X-axis label
y = "COVID Deaths in Europe (Daily)"  # Y-axis label
) +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +  # Y-axis limits
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +  # X-axis formatting
theme_minimal(base_size = 15) +  # Basic theme
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  # Rotate X-axis labels
axis.title.x = element_text(size = 14, face = "bold"),  # Ensure X-axis title
axis.title.y = element_text(size = 14, face = "bold"),  # Ensure Y-axis title
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")  # Title centered
)
rlang::last_trace()
str(owideu)
# If necessary, convert the date column to Date format
owideu$date <- as.Date(owideu$date)
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
geom_text(aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# If necessary, convert the date column to Date format
owideu$date <- as.Date(owideu$date)
# Subset the data for labeling
label_data <- subset(owideu, location %in% c("Spain", "Germany", "Ukraine", "Italy"))
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
# Only label selected countries
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# If necessary, convert the date column to Date format
owideu$date <- as.Date(owideu$date)
# Subset to find the peak deaths for each country
label_data <- owideu %>%
filter(location %in% c("Spain", "Germany", "Ukraine", "Italy")) %>%
group_by(location) %>%
slice_max(new_deaths, n = 1)
library(dplyr)
owideu$date <- as.Date(owideu$date)
# Subset to find the peak deaths for each country
label_data <- owideu %>%
filter(location %in% c("Spain", "Germany", "Ukraine", "Italy")) %>%
group_by(location) %>%
slice_max(new_deaths, n = 1)
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
# Only label selected countries at their peak deaths
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",
y = "COVID Deaths in Europe (Daily)") +
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Subset to find the peak deaths for each country
label_data <- owideu %>%
filter(location %in% c("Spain", "Germany", "Ukraine", "Italy")) %>%
group_by(location) %>%
slice_max(new_deaths, n = 1)
# Scatterplot using data
ggplot(owideu, aes(x = date, y = new_deaths)) +
geom_point(alpha = 0.6, color = "magenta") +
# Only label selected countries at their peak deaths
geom_text(data = label_data, aes(label = location), vjust = -1, hjust = 1.5, size = 3, check_overlap = TRUE) +
labs(title = "Daily COVID-19 Deaths in Europe Over Time",
x = "Date",  # x-axis label
y = "COVID Deaths in Europe (Daily)") +  # y-axis label
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000)) +
scale_x_date(limits = c(as.Date("2020-01-01"), as.Date("2023-08-01")),
date_labels = "%Y-%m", date_breaks = "2 months") +
theme_minimal(base_size = 15) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Set seed for reproducibility
set.seed(123)
# Generate a dataset
df <- data.frame(
ID = 1:100,  # IDs from 1 to 100
Category = sample(c("A", "B", "C"), 100, replace = TRUE),  # Randomly assign categories
Value = round(runif(100, min = 10, max = 100), 2),  # Random values between 10 and 100
Date = sample(seq(as.Date('2020-01-01'), as.Date('2021-01-01'), by="day"), 100, replace = TRUE)  # Random dates
)
# View the first few rows of the dataset
head(df)
View(df)
install.packages("ggplot2")  # Only needed once
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Generate a dataset
df <- data.frame(
ID = 1:100,  # IDs from 1 to 100
Category = sample(c("A", "B", "C"), 100, replace = TRUE),  # Randomly assign categories
Value = round(runif(100, min = 10, max = 100), 2),  # Random values between 10 and 100
Date = sample(seq(as.Date('2020-01-01'), as.Date('2021-01-01'), by="day"), 100, replace = TRUE)  # Random dates
)
# View the first few rows of the dataset
head(df)
df_summary <- aggregate(Value ~ Category, df2, mean)
df_summary <- aggregate(Value ~ Category, df, mean)
ggplot(df_summary, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black")
install.packages("ggplot2")  # Only needed once
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")  # Only needed once
library(ggplot2)
df_summary <- aggregate(Value ~ Category, df, mean)
ggplot(df_summary, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black")
installed.packages()["ggplot2", ]
ggplot(df_summary, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black")
library(ggplot2)
summary_df <- df %>%
group_by(Category) %>%
summarize(
Count = n(),
Avg_Value = mean(Value)
)
install.packages("ggplot2")
install.packages("gt")
install.packages("dplyr")
install.packages("tidyr")
summary_df <- df %>%
group_by(Category) %>%
summarize(
Count = n(),
Avg_Value = mean(Value)
)
install.packages(c("gsubfn", "proto", "tidyverse"))
library(gsubfn)
library(tidyverse)
axiom="X"
rules=list("X"="F-[[X]+X]+F[+FX]-X", "F"="FF")
angle=22.5
depth=6
for (i in 1:depth) axiom=gsubfn(".", rules, axiom)
actions=str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|R|\\[|\\]|\\|") %>% unlist
status=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))
points=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)
for (action in actions)
{
if (action=="F")
{
x=points[1, "x1"]+cos(points[1, "alfa"]*(pi/180))
y=points[1, "y1"]+sin(points[1, "alfa"]*(pi/180))
points[1,"x2"]=x
points[1,"y2"]=y
data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,
alfa=points[1, "alfa"],
depth=points[1,"depth"]) %>% rbind(points)->points
}
if (action %in% c("+", "-")){
alfa=points[1, "alfa"]
points[1, "alfa"]=eval(parse(text=paste0("alfa",action, angle)))
}
if(action=="["){
data.frame(x=points[1, "x1"], y=points[1, "y1"], alfa=points[1, "alfa"]) %>%
rbind(status) -> status
points[1, "depth"]=points[1, "depth"]+1
}
if(action=="]"){
depth=points[1, "depth"]
points[-1,]->points
data.frame(x1=status[1, "x"], y1=status[1, "y"], x2=NA, y2=NA,
alfa=status[1, "alfa"],
depth=depth-1) %>%
rbind(points) -> points
status[-1,]->status
}
}
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),
lineend = "round",
color="burlywood3", # Set your own Fall color?
data=na.omit(points)) +
coord_fixed(ratio = 1) +
theme_void() # No grid nor axes
for (action in actions)
{
if (action=="F")
{
x=points[1, "x1"]+cos(points[1, "alfa"]*(pi/180))
y=points[1, "y1"]+sin(points[1, "alfa"]*(pi/180))
points[1,"x2"]=x
points[1,"y2"]=y
data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,
alfa=points[1, "alfa"],
depth=points[1,"depth"]) %>% rbind(points)->points
}
if (action %in% c("+", "-")){
alfa=points[1, "alfa"]
points[1, "alfa"]=eval(parse(text=paste0("alfa",action, angle)))
}
if(action=="["){
data.frame(x=points[1, "x1"], y=points[1, "y1"], alfa=points[1, "alfa"]) %>%
rbind(status) -> status
points[1, "depth"]=points[1, "depth"]+1
}
if(action=="]"){
depth=points[1, "depth"]
points[-1,]->points
data.frame(x1=status[1, "x"], y1=status[1, "y"], x2=NA, y2=NA,
alfa=status[1, "alfa"],
depth=depth-1) %>%
rbind(points) -> points
status[-1,]->status
}
}
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),
lineend = "round",
color="purple", # Set your own Fall color?
data=na.omit(points)) +
coord_fixed(ratio = 1) +
theme_void() # No grid nor axes
plot(pressure, pch=16)  # Can you change pch?
text(150, 600,
"Pressure (mm Hg)\nversus\nTemperature (Celsius)")
plot(pressure, pch=5)  # Can you change pch?
text(150, 600,
"Pressure (mm Hg)\nversus\nTemperature (Celsius)")
par(mfrow=c(3, 2))
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=16)  # Can you change pch?
plot(pressure, pch=5)  # Can you change pch?
par(mfrow=c(3, 2))
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=2) # Try different cex value?
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for?
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
# Histogram
# Random data
Y <- rnorm(50)
# Make sure no Y exceed [-3.5, 3.5]
Y[Y < -3.5 | Y > 3.5] <- NA # Selection/set range
x <- seq(-3.5, 3.5, .1)
dn <- dnorm(x)
par(mar=c(4.5, 4.1, 3.1, 0))
hist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5),
col="gray80", freq=FALSE)
lines(x, dnorm(x), lwd=2)
par(mar=c(5.1, 4.1, 4.1, 2.1))
# Barplot
par(mar=c(2, 3.1, 2, 2.1))
midpts <- barplot(VADeaths,
col=gray(0.1 + seq(1, 9, 2)/11),
names=rep("", 4))
mtext(sub(" ", "\n", colnames(VADeaths)),
at=midpts, side=1, line=0.5, cex=0.5)
text(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,
VADeaths,
col=rep(c("white", "black"), times=3:2),
cex=0.8)
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
set.seed(123)
# Number of observations
n <- 100
# Generate filler data
filler_data <- data.frame(
ID = 1:n,
age = sample(18:65, n, replace = TRUE),
income = round(runif(n, 30000, 100000), 0),
gender = sample(c("Male", "Female", "Other"), n, replace = TRUE, prob = c(0.45, 0.45, 0.1))
)
# View first few rows of the dataset
head(filler_data)
par(mfrow=c(3, 2))
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
x <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
# Setting label orientation, margins c(bottom, left, top, right) & text size
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
plot.new()
plot.window(range(x), c(0, 6))
lines(x, y1)
lines(x, y2)
points(x, y1, pch=16, cex=3) # Try different cex value? Changing to 3 makes the points larger
points(x, y2, pch=21, bg="white", cex=2)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4)) # What is the first number standing for? # The 1 means we are altering the x-axis
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="u")
mtext("Travel Time (s)", side=1, line=2, cex=0.8)
mtext("Responses per Travel", side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
# Set seed for reproducibility
set.seed(123)
# Number of observations
n <- 100
# Generate filler data
filler_data <- data.frame(
ID = 1:n,
age = sample(18:65, n, replace = TRUE),
income = round(runif(n, 30000, 100000), 0),
gender = sample(c("Male", "Female", "Other"), n, replace = TRUE, prob = c(0.45, 0.45, 0.1))
)
# Setting parameters
par(mfrow=c(3, 2))
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
# Scatterplot
lot.new()
par(las=1, mar=c(4, 4, 2, 4), cex=.7)
# Scatterplot
plot.new()
plot.window(range(filler_data$age), range(filler_data$income))
lines(lowess(filler_data$age, filler_data$income), col="gray50")
points(filler_data$age, filler_data$income, pch=16, cex=1.5, col="blue")
points(filler_data$age, filler_data$income, pch=21, bg="white", cex=1.2)
axis(1, at=seq(age_min, age_max, 10)) # X-axis
par(mar=c(4.5, 4.1, 3.1, 0))
# Histogram
hist(filler_data$income,
breaks=seq(min(filler_data$income), max(filler_data$income), by=5000),
ylim=c(0, max(table(cut(filler_data$income, breaks=seq(min(filler_data$income), max(filler_data$income), by=5000)))) * 1.1),
col="gray80",
freq=FALSE,
main="Income Distribution",
xlab="Income (USD)")
# Set up the plot parameters
par(mar=c(4.5, 4.1, 3.1, 0))
# Histogram
hist(filler_data$income,
breaks="FD",
ylim=c(0, max(table(cut(filler_data$income, breaks="FD"))) * 1.1),
col="gray80",
freq=FALSE,
main="Income Distribution",
xlab="Income (USD)")
par(mar=c(4.5, 4.1, 3.1, 0))
# Define breaks using pretty() for better range coverage
breaks <- pretty(filler_data$income, n = 10)  # 10 breaks
# Create histogram for Income
hist(filler_data$income,
breaks=breaks,  # Use the defined breaks
ylim=c(0, max(table(cut(filler_data$income, breaks=breaks))) * 1.1),
col="gray80",
freq=FALSE,
main="Income Distribution",
xlab="Income (USD)")
# Overlay normal distribution curve
x <- seq(min(filler_data$income), max(filler_data$income), length.out=100)
lines(x, dnorm(x, mean=mean(filler_data$income), sd=sd(filler_data$income)), lwd=2)
# Reset margins to default
par(mar=c(5.1, 4.1, 4.1, 2.1))
# Summarize the data: Average income by gender
income_summary <- aggregate(income ~ gender, data=filler_data, FUN=mean)
# Barplot
par(mar=c(2, 3.1, 2, 2.1))
midpts <- barplot(income_summary$income,
col=gray(0.1 + seq(1, 3, 1)/4),
names.arg=income_summary$gender,
ylim=c(0, max(income_summary$income) * 1.1))
# Adding text on top of bars
text(midpts, income_summary$income,
round(income_summary$income, 0),
pos=3, cex=0.8, col="black")
# Reset margins to default
par(mar=c(5.1, 4.1, 4.1, 2.1))
# Boxplot
par(mar=c(3, 4.1, 2, 0))
# Create boxplot of income by gender
boxplot(income ~ gender, data=filler_data,
boxwex = 0.25, col=c("white", "gray"),
xlab="",
ylab="Income (USD)", ylim=c(0, max(filler_data$income) * 1.1))
# Add labels for gender on the x-axis
mtext("Gender", side=1, line=2.5, cex=0.8)
# Adding a legend
legend("topright", legend=c("Female", "Male"),
fill=c("white", "gray"),
bty="n")
# Reset margins to default
par(mar=c(5.1, 4.1, 4.1, 2.1))
# Define age and income sequences for the grid
age_seq <- seq(min(filler_data$age), max(filler_data$age), length=30)
income_seq <- seq(min(filler_data$income), max(filler_data$income), length=30)
# Create a function for z values; in this case, let's use a simple density estimate
f <- function(x, y) {
mean_income <- mean(filler_data$income[filler_data$age == x], na.rm = TRUE)
return(ifelse(is.na(mean_income), 0, mean_income))
}
# Create a grid of z values using outer
z <- outer(age_seq, income_seq, Vectorize(f))
# Replace NA with a value (for better visualization)
z[is.na(z)] <- 0
# Set up the perspective plot
par(mar=c(0, 0.5, 0, 0), lwd=0.5)
persp(age_seq, income_seq, z,
theta = 30,
phi = 30,
expand = 0.5,
col="lightblue",
xlab="Age (Years)",
ylab="Income (USD)",
zlab="Mean Income")
# Reset margins to default
par(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)
# Summarize the data: Count of individuals by gender
gender_counts <- table(filler_data$gender)
# Create pie chart
par(mar=c(0, 0, 0, 0))  # No margins for a clean look
pie(gender_counts,
col=c("lightblue", "lightgreen"),
labels=paste(names(gender_counts), "\n", gender_counts, sep=""),
main="Gender Distribution in Filler Data")
# Reset margins to default
par(mar=c(5.1, 4.1, 4.1, 2.1))
